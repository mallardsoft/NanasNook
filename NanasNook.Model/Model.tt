<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ assembly name="System.Core"#>
<#@ assembly name="UpdateControls.Correspondence.Factual"#>
<#@ assembly name="QEDCode.LLOne"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="UpdateControls.Correspondence.Factual"#>
<#@ import namespace="UpdateControls.Correspondence.Factual.Compiler"#>
<#@ import namespace="UpdateControls.Correspondence.Factual.Metadata"#>
<#@ output extension=".generated.cs"#>
<#
var fileName = Host.TemplateFile.Replace(".tt",".fact");
var parser = new FactualParser(new StreamReader(fileName));
var ast = parser.Parse();

if (ast == null)
{
    foreach (var error in parser.Errors)
    {#>
#line <#=error.LineNumber#> "<#=fileName#>"
#error <#=error.Message#>
    <#}
}
else {

var analyzer = new Analyzer(ast);
var targetNamespace = analyzer.Analyze();

if (targetNamespace == null)
{
    foreach (var error in analyzer.Errors)
    {#>
#line <#=error.LineNumber#> "<#=fileName#>"
#error <#=error.Message#>
    <#}
}
else {

#>
using System.Collections.Generic;
using System.Linq;
using UpdateControls.Correspondence;
using UpdateControls.Correspondence.Mementos;
using System;

/**
/ For use with http://graphviz.org/
digraph "<#=targetNamespace.Name#>"
{
    rankdir=BT
<# foreach (Class c in targetNamespace.Classes) {
    foreach (Predecessor p in c.Predecessors) { #>
    <#=c.Name#> -> <#=p.FactType#><#
        if (p.Cardinality == Cardinality.Many) {
            #> [label="  *"]<#
        }
        else if (p.Cardinality == Cardinality.Optional) {
            #> [label="  ?"]<#
        }
        if (p.IsPivot) {
            #> [color="red"]<#
        } #>

<#	}
} #>
}
**/

namespace <#=targetNamespace.Name#>
{
<# foreach (Class c in targetNamespace.Classes) { #>
    [CorrespondenceType]
    public partial class <#=c.Name#> : CorrespondenceFact
    {
        // Roles
<# foreach (Predecessor predecessor in c.Predecessors) { #>
        public static <#=RoleClass(predecessor)#> <#=RoleName(predecessor.Name)#> = new <#=RoleClass(predecessor)#>("<#=predecessor.Name#>"<#=predecessor.IsPivot ? ", RoleRelationship.Pivot" : ""#>);
<#}#>

        // Queries
<# foreach (Query query in c.Queries) { #>
        public static Query <#=QueryName(query.Name)#> = new Query()
<# foreach (Join join in query.Joins) { #>
<#   if (join.Conditions.Any()) { #>
<#      Condition first = join.Conditions.First(); #>
            .Join<#=join.Direction#>(<#=join.Type#>.<#=RoleName(join.Name)#>, Condition.WhereIs<#=first.Modifier == ConditionModifier.Positive ? "Not" : ""#>Empty(<#=join.Type#>.<#=QueryName(first.Name)#>)
<#        foreach (Condition condition in join.Conditions.Skip(1)) { #>
                .And().Is<#=condition.Modifier == ConditionModifier.Positive ? "Not" : ""#>Empty(<#=join.Type#>.<#=QueryName(condition.Name)#>)
<#        } #>
            )
<#   } else { #>
            .Join<#=join.Direction#>(<#=join.Type#>.<#=RoleName(join.Name)#>)
<#   }#>
<#}#>
            ;
<#}#>

        // Predecessors
<# foreach (Predecessor predecessor in c.Predecessors) { #>
        private <#=PredecessorClass(predecessor)#> _<#=predecessor.Name#>;
<#}#>

<# if (c.Unique) { #>
        // Unique
        [CorrespondenceField]
        private Guid _unique;

<# } #>
        // Fields
<# foreach (Field field in c.Fields) {#>
        [CorrespondenceField]
        private <#=FieldType(field)#> _<#=field.Name#>;
<#}#>

        // Results
<# foreach (Result result in c.Results) { #>
        private <#=ResultClass(result)#> _<#=result.Query.Name#>;
<#}#>
<# foreach (Predicate predicate in c.Predicates) { #>
        private Result<CorrespondenceFact> _<#=predicate.Query.Name#>;
<#}#>

        // Business constructor
        public <#=c.Name#>(
<# SeparatorReset(); foreach (Predecessor predecessor in c.Predecessors) { #>
            <#=Separator(",")#><#=ParameterType(predecessor)#> <#=predecessor.Name#>
<#}#>
<# foreach (Field field in c.Fields) {#>
            <#=Separator(",")#><#=FieldType(field)#> <#=field.Name#>
<#}#>
            )
        {
<# if (c.Unique) { #>
            _unique = Guid.NewGuid();
<# } #>
            InitializeResults();
<# foreach (Predecessor predecessor in c.Predecessors) { #>
            _<#=predecessor.Name#> = new <#=PredecessorClass(predecessor)#>(this, <#=RoleName(predecessor.Name)#>, <#=predecessor.Name#>);
<#}#>
<# foreach (Field field in c.Fields) {#>
            _<#=field.Name#> = <#=field.Name#>;
<#}#>
        }

        // Hydration constructor
        private <#=c.Name#>(FactMemento memento)
        {
            InitializeResults();
<# foreach (Predecessor predecessor in c.Predecessors) { #>
            _<#=predecessor.Name#> = new <#=PredecessorClass(predecessor)#>(this, <#=RoleName(predecessor.Name)#>, memento);
<#}#>
        }

        // Result initializer
        private void InitializeResults()
        {
<# foreach (Result result in c.Results) { #>
            _<#=result.Query.Name#> = new <#=ResultClass(result)#>(this, <#=QueryName(result.Query.Name)#>);
<#}#>
<# foreach (Predicate predicate in c.Predicates) { #>
        _<#=predicate.Query.Name#> = new Result<CorrespondenceFact>(this, <#=QueryName(predicate.Query.Name)#>);
<#}#>
        }

        // Predecessor access
<# foreach (Predecessor predecessor in c.Predecessors) {
        if (predecessor.Cardinality == Cardinality.Many) { #>
        public IEnumerable<<#=predecessor.FactType#>> <#=Capitalize(predecessor.Name)#>
        {
            get { return _<#=predecessor.Name#>; }
        }
     <# } else { #>
        public <#=predecessor.FactType#> <#=Capitalize(predecessor.Name)#>
        {
            get { return _<#=predecessor.Name#>.Fact; }
        }
<#}}#>

        // Field access
<# foreach (Field field in c.Fields) {#>
        public <#=PropertyType(field)#> <#=Capitalize(field.Name)#>
        {
            get { return _<#=field.Name#>; }
        }
<#}#>

        // Query result access
<# foreach (Result result in c.Results) { #>
        public IEnumerable<<#=result.Type#>> <#=Capitalize(result.Query.Name)#>
        {
            get { return _<#=result.Query.Name#>; }
        }
<#}#>

        // Predicate result access
<# foreach (Predicate predicate in c.Predicates) { #>
        public bool <#=Capitalize(predicate.Query.Name)#>
        {
            get { return <#=predicate.Modifier == ConditionModifier.Positive ? "" : "!"#>_<#=predicate.Query.Name#>.Any(); }
        }
<#}#>
    }
    
<#}#>
}
<#}}#>
<#+
private static string Capitalize(string str)
{
    return str.Substring(0, 1).ToUpper() + str.Substring(1);
}

private static string RoleClass(Predecessor predecessor)
{
    return "Role<" + predecessor.FactType + ">";
}

private static string RoleName(string predecessorName)
{
    return "Role" + Capitalize(predecessorName);
}

private static string QueryName(string queryName)
{
    return "Query" + Capitalize(queryName);
}

private static string ResultClass(Result result)
{
    return "Result<" + result.Type + ">";
}

private static string PredecessorClass(Predecessor predecessor)
{
    return
        (predecessor.Cardinality == Cardinality.Many ? "PredecessorList" :
         predecessor.Cardinality == Cardinality.Optional ? "PredecessorOpt" :
         "PredecessorObj") +
        "<" + predecessor.FactType + ">";
}

private static string ParameterType(Predecessor predecessor)
{
    if (predecessor.Cardinality == Cardinality.Many)
        return string.Format("IEnumerable<{0}>", predecessor.FactType);
    else
        return predecessor.FactType;
}

private static string FieldType(Field field)
{
    if (field.Cardinality == Cardinality.One)
        return NativeTypeName(field.NativeType);
    else if (field.Cardinality == Cardinality.Many)
        return string.Format("List<{0}>", NativeTypeName(field.NativeType));
    else
    {
        if (IsReferenceType(field.NativeType))
            return NativeTypeName(field.NativeType);
        else
            return string.Format("{0}?", NativeTypeName(field.NativeType));
    }
}

private static string PropertyType(Field field)
{
    if (field.Cardinality == Cardinality.One)
        return NativeTypeName(field.NativeType);
    else if (field.Cardinality == Cardinality.Many)
        return string.Format("IEnumerable<{0}>", NativeTypeName(field.NativeType));
    else
    {
        if (IsReferenceType(field.NativeType))
            return NativeTypeName(field.NativeType);
        else
            return string.Format("{0}?", NativeTypeName(field.NativeType));
    }
}

private static string NativeTypeName(NativeType nativeType)
{
    if (nativeType == NativeType.String)
        return "string";
    if (nativeType == NativeType.Int)
        return "int";
    if (nativeType == NativeType.Float)
        return "float";
    if (nativeType == NativeType.Char)
        return "char";
    if (nativeType == NativeType.Date)
        return "DateTime";
    if (nativeType == NativeType.Time)
        return "DateTime";
    return "UnknownType";
}

private static bool IsReferenceType(NativeType nativeType)
{
    return
        nativeType == NativeType.String
        ;
}

private bool _first;

private void SeparatorReset()
{
    _first = true;
}

private string Separator(string text)
{
    if (!_first)
        return text;
    else
    {
        _first = false;
        return string.Empty;
    }
}
#>
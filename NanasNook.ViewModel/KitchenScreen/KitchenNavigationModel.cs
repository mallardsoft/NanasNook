using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NanasNook.Model;
using UpdateControls;

namespace NanasNook.ViewModel.KitchenScreen
{
    public class KitchenNavigationModel
    {
        private Order _selectedBackloggedOrder;
        private Pull _selectedInProgressPull;
        private Completed _selectedCompletion;

        #region Independent properties
        // Generated by Update Controls --------------------------------
        private Independent _indSelectedInProgressPull = new Independent();
        private Independent _indSelectedCompletion = new Independent();
        private Independent _indSelectedBackloggedOrder = new Independent();

        public Order SelectedBackloggedOrder
        {
            get { _indSelectedBackloggedOrder.OnGet(); return _selectedBackloggedOrder; }
            set
            {
                _indSelectedBackloggedOrder.OnSet();
                _selectedBackloggedOrder = value;
                if (value != null)
                {
                    _indSelectedInProgressPull.OnSet();
                    _selectedInProgressPull = null;
                    _indSelectedCompletion.OnSet();
                    _selectedCompletion = null;
                }
            }
        }

        public Pull SelectedInProgressPull
        {
            get { _indSelectedInProgressPull.OnGet(); return _selectedInProgressPull; }
            set
            {
                _indSelectedInProgressPull.OnSet();
                _selectedInProgressPull = value;
                if (value != null)
                {
                    _indSelectedBackloggedOrder.OnSet();
                    _selectedBackloggedOrder = null;
                    _indSelectedCompletion.OnSet();
                    _selectedCompletion = null;
                }
            }
        }

        public Completed SelectedCompletion
        {
            get { _indSelectedCompletion.OnGet(); return _selectedCompletion; }
            set
            {
                _indSelectedCompletion.OnSet();
                _selectedCompletion = value;
                if (value != null)
                {
                    _indSelectedBackloggedOrder.OnSet();
                    _selectedBackloggedOrder = null;
                    _indSelectedInProgressPull.OnSet();
                    _selectedInProgressPull = null;
                }
            }
        }
        // End generated code --------------------------------
        #endregion
    }
}
